/*
 *
 *    Copyright 2020 P2WB0T
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

group 'pl.kamil0024'

def versionObj = new Version(major: 2)
version = "$versionObj".toString()
mainClassName = 'pl.kamil0024.core.Main'

def jdaVersion = '4.3.0_277'
def alphaTest = '1b6677e'

repositories {
    maven { url = uri("https://dl.bintray.com/sedmelluq/com.sedmelluq") }
    mavenCentral()
    mavenLocal()
    maven { url = 'https://plugins.gradle.org/m2/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url = 'https://m2.dv8tion.net/releases' }
}

dependencies {
    if (alphaTest != null) compile 'com.github.dv8fromtheworld:jda:' + alphaTest
    else compile 'net.dv8tion:JDA:' + jdaVersion
    compile 'com.intellij:annotations:+@jar'
    compile 'com.github.queer:async-postgres-jsonb-orm:e348e109f8'
    compile 'org.json:json:20090211'
    compile 'org.codehaus.groovy:groovy-all:3.0.4'
    compile 'com.google.code.gson:gson:2.8.6'
    compile 'redis.clients:jedis:2.9.0'

    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.tuxdude.logback.extensions:logback-colorizer:1.0.1'
    compile 'org.slf4j:slf4j-api:1.7.25'

    compile 'com.google.inject:guice:4.2.2'
    compile 'org.jsoup:jsoup:1.12.1'
    compile 'club.minnced:discord-webhooks:0.2.0'
    compile 'com.kcthota:emoji4j:5.0'
    compile 'org.projectlombok:lombok:1.18.10'
    compile 'info.debatty:java-string-similarity:1.2.1'
    compile 'com.vdurmont:emoji-java:5.1.1'

    compile 'io.undertow:undertow-core:2.1.0.Final'

    implementation 'se.michaelthelin.spotify:spotify-web-api-java:6.5.3'
    implementation 'io.sentry:sentry:5.0.1'
    implementation 'com.sedmelluq:lavaplayer:1.3.75'
    implementation 'com.github.KAMIL0024:Bdate:-SNAPSHOT'
    implementation 'com.squareup.okhttp3:okhttp:3.13.0'

    annotationProcessor 'org.projectlombok:lombok:1.18.10'
}

build.dependsOn jar

compileJava {
    options.compilerArgs << '-parameters'
}

artifacts {
    archives shadowJar
}

shadowJar {
    manifest {
        attributes 'Implementation-Title': 'P2WB0T', 'Implementation-Version': version
        attributes 'Main-Class': 'pl.kamil0024.core.Main'
    }
    mergeServiceFiles()
    mergeGroovyExtensionModules()

}

class Version {
    String major

    static String getBuild() {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) return "???"
        String b = System.getenv("BUILD_NUMBER")
        if (b == null || b.isEmpty()) b = System.getProperty("BUILD_NUMBER")
        if (b == null || b.isEmpty()) return "????"
        return b
    }

    static String getHash() {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) return "???"
        def proc = 'git rev-parse --short HEAD'.execute()
        proc.waitFor()
        return proc.text.trim()
    }

    String toString() {
        "$major." + getBuild() + "_" + getHash()
    }
}

compileJava.options.encoding = 'UTF-8'
